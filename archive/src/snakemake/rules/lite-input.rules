import os
FULL_DATA = "/project/mstephens/data/external_private_supp/gtex-v6/eqtl_data"
FULL_INPUT = "/project/mstephens/gtex/analysis/april2015/Full/input"

rule get_lite_list:
  input: config["H5Dir"] + "/MatrixEQTLSumStats.Portable.h5"
  output:
    max = config["InputDir"] + "/lite-max.txt",
    null = config["InputDir"] + "/lite-null.txt",
  shell:
    '''
    python {config[SrcDir]}/python/analysis_admin.py sumstat_query \
    {input} -g max -s rownames --merged | sed 's/_/\t/' > {output.max}
    python {config[SrcDir]}/python/analysis_admin.py sumstat_query \
    {input} -g null -s rownames --merged | sed 's/_/\t/' > {output.null}
    '''

rule prepare_lite_covariates:
  input:
   source = os.path.join(FULL_DATA, config["V6Prefix"] + "covariates")
  output:
    max_dir = os.path.join(config["DataDir"].replace("-dir", "-max"), config["V6Prefix"] + "covariates"),
    null_dir = os.path.join(config["DataDir"].replace("-dir", "-null"), config["V6Prefix"] + "covariates")
  shell:
    '''
    ln -s {input.source} {output.max_dir}
    ln -s {input.source} {output.null_dir}
    '''

rule prepare_lite_expression:
  input:
    source = expand("{path}/{item}.expr.txt.gz".format(path = os.path.join(FULL_DATA, config["V6Prefix"] + "geneLevelNormalizedExpressionMatrices"), item = item) for item in config["V6Tissues"].split()),
    max = config["InputDir"] + "/lite-max.txt",
  output:
    max_data = expand("{path}/{item}.expr.txt.gz".format(path = os.path.join(config["DataDir"].replace("-dir", "-max"), config["V6Prefix"] + "geneLevelNormalizedExpressionMatrices"), item = item) for item in config["V6Tissues"].split()),
  run:
    for x, y in zip(input.source, output.max_data):
      y = y[:-3]
      shell('''
        head -1 <(zcat {x}) > {y}
        awk 'NR==FNR{{a[$0]=$0}}NR>FNR{{if($1==a[$1])print $0}}' <(cut -f1 {input.max} | sort -u) <(zcat {x}) >> {y}
        gzip --best {y}
        ''')

rule prepare_lite_snps:
  input:
    source = expand("{path}/{item}.snps.txt.gz".format(path = os.path.join(FULL_DATA, config["V6Prefix"] + "snpMatrices"), item = item) for item in config["V6Tissues"].split()),
    max = config["InputDir"] + "/lite-max.txt",
    null = config["InputDir"] + "/lite-null.txt",
  output:
    max_data = expand("{path}/{item}.snps.txt.gz".format(path = os.path.join(config["DataDir"].replace("-dir", "-max"), config["V6Prefix"] + "snpMatrices"), item = item) for item in config["V6Tissues"].split()),
    null_data = expand("{path}/{item}.snps.txt.gz".format(path = os.path.join(config["DataDir"].replace("-dir", "-null"), config["V6Prefix"] + "snpMatrices"), item = item) for item in config["V6Tissues"].split()),
  run:
    for x, y, z in zip(input.source, output.max_data, output.null_data):
      y = y[:-3]
      z = z[:-3]
      shell('''
        # max data
        head -1 <(zcat {x}) > {y}
        awk 'NR==FNR{{a[$0]=$0}}NR>FNR{{if($1==a[$1])print $0}}' <(cut -f2 {input.max} | sort -u) <(zcat {x}) >> {y}
        gzip --best {y}
        # null data
        head -1 <(zcat {x}) > {z}
        awk 'NR==FNR{{a[$0]=$0}}NR>FNR{{if($1==a[$1])print $0}}' <(cut -f2 {input.null} | sort -u) <(zcat {x}) >> {z}
        gzip --best {z}
        ''')

rule get_lite_coords:
  input:
    FULL_INPUT + "/tss_coords.bed.gz",
    FULL_INPUT + "/snp_coords.bed.gz",
    config["InputDir"] + "/lite-max.txt",
    config["InputDir"] + "/lite-null.txt"
  output:
    config["InputDir"] + "/tss_coords.bed.gz",
    config["InputDir"] + "/snp_coords.bed.gz",
    config["InputDir"] + "/tss_coords.bed.gz.tbi",
    config["InputDir"] + "/snp_coords.bed.gz.tbi"
  shell:
    '''
    # TSS
    awk 'NR==FNR {{a[$1]=1; next}} ($4 in a) {{print $0}}' <(cut -f1 {input[2]} | sort -u) <(zcat {input[0]}) | sort -k1,1V -k2,2g | bgzip > {output[0]}
    # SNP max
    awk 'NR==FNR {{a[$1]=1; next}} ($4 in a) {{print $0}}' <(cut -f2 {input[2]} | sort -u) <(zcat {input[1]}) > {config[TmpDir]}/1.txt
    # SNP null
    awk 'NR==FNR {{a[$1]=1; next}} ($4 in a) {{print $0}}' <(cut -f2 {input[3]} | sort -u) <(zcat {input[1]}) > {config[TmpDir]}/2.txt
    # SNP
    cat {config[TmpDir]}/1.txt {config[TmpDir]}/2.txt | sort -k1,1g -k2,2g | uniq | bgzip > {output[1]}
    tabix -p bed {output[0]}; tabix -p bed {output[1]}
    '''



    