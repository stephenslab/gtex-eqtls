###
#! GTEx summary statistics
###
# Computations are done on the Midway cluster, using @@snakemake@@.

###
# Formatting GTEx summary statistics v6
###
#! Convert tissue specific results to matrices
# For ease of storage / access / numeric operations I convert the summary statistics from plain text file to HDF5 format.
cd src/snakemake/workflows/BMAConfigModel
snakemake sumstat_to_h5
#{note
# I ended up having to perform the entire data conversion on SSD on my desktop computer using. The @@pytable@@ version of HDF5 implementation takes 2h to convert each tissue but on Midway when HDF5 file size grows to over 1GB the disk I/O is unacceptable. There must be tweaks but not looking into it for the moment. Implementations with @@h5py@@ for the same purpose is way faster in data conversion (30min each file, performance on Midway is also acceptable) but the resulting data file size is 1.4 times of @@pytables@@ implementation, even both set to zlib9 compression -- thus I stick with @@pytable@@. Once converted, it takes almost zero seconds to query data from the HDF5 files.
#}
#! Merge data across tissues
# The files are merged in batches.
snakemake prepare_merge_batch
snakemake merge_h5
# It takes on average 3 hours per batch to complete. Merged number of genes per batch see @@log/2015-06-18-merger-log.txt@@. There are a total of 38933 genes.
#{note
# I was suspicious to see only 38933 genes in v6. I decide to check against the input data as well as the intermediate HDF5 files I generated
#{bash compare gene number
snakemake count_genes_from_data
snakemake count_genes_from_h5
#}
# Counting and comparing results from both sources, I found there are indeed only 38933 genes in the output. So we are good.
#}
#! Select the ``best'' and ``null'' gene-snp pairs
# For each gene I select its max and up to 3 null gene-snp pairs, for use of calibrating Sarah's model
snakemake sample_max_null
###
# Creating R interface for the new format
###
# Since the release did not use rsID to name SNPs I create a database to match SNP ID with dbSNP names, to use with R to extract proper SNP-gene by rsID.
wget ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606_b144_GRCh37p13/VCF/All_20150605.vcf.gz
# Build an annotation database matching SNP ID to rs ID as well as the cis-genes involved of up to {$\(\pm100,000\)$}bp, in 50 batches.
snakemake prepare_snp_lookup_db
snakemake create_snp_lookup_db
# It takes on average 25 hours per batch to complete. There are 9794339 out of 10297646 (95.1%) SNPs with rsID in latest dbSNP (build 144).
#! Run queries
# Now we have the data @@*.h5@@ and meta-data @@*.sqlite@@ in place. I have made a separate note on how to use this data-set. See @@SumstatsDB.md@@ in this repo.
###
# Reproducing GTEx v6 cis-eQTL analysis
###
# The idea now is to figure out how the @@matrixEQTL@@ analysis is done exactly in v6 so that @@eqtlbma@@ will be done on the same basis, i.e., input files and parameters. For this purpose I make a toy dataset for a randomly chosen tissue "Adipose Subcutaneous" from GTEx consisting of five files for input to @@matrixEQTL@@: genotype @@SNP.txt@@, expression @@GE.txt@@, a file @@Covariates.txt@@ of covariates and files @@geneloc.txt@@ and @@snpsloc.txt@@ with gene and SNP location information. Below is the data preparation command
snakemake prepare_matrix_eqtl_input
# Details see below.
#! Covariates
# There are 40 covariates: ``C1,C2,C3,InferredCov1, InferredCov2, ... InferredCov35, gender, Platform''. Not all are included in every analysis -- inclusion depends on sample size. See the @@README@@ for details.
#! SNP data
#!! SNP matrix
# Input genotype data are large. Here I just take the first 500 SNPs from the tissue data for verification purpose.
#{warning
# SNP data released has a lot of imputed data. Cautions are to be taken when comparing with previous @@eqtlbma@@ analysis (have to make sure the input data are the same).
#}
#!! SNP location
# This is required input for @@matrixEQTL@@ but is not provided. Need to create it from SNP ID's.
#! Expression data
# To focus only on genes paired with the 500 SNPs I get a list of genes via @@bedtools closest@@ and only extract expression data for these genes. First I create @@bedtools@@ input and run @@bedtools@@ to search for genes within 1000bp range to the SNPs of interest. Then I extracted expression data for selected genes.
#! Gene location data
# Location data is extracted for the selected genes.
#! Find overlapping gene-snp pairs between this toy set and GTEx v6 summary statistics
snakemake find_genes_with_sumstats
#! Run @@matrixEQTL@@ on this toy set
# Once the input is prepared it is straightforward to just download the example R script (below, also committed to git repo) and run it, just remember to set the correct data path and change emitted p-value threshold to 1 (@@pvOutputThreshold=1@@).
# @http://www.bios.unc.edu/research/genomic_software/Matrix_eQTL/R.html@
# To obtain value for one gene-snp pair:
#{r
source('MatrixEQTL.R')
ss = '1_714019_A_G_b37'
gg = 'ENSG00000237491.4'
me$all$eqtls[which(me$all$eqtls$snps == ss & me$all$eqtls$gene == gg ),]
#}
#{out
                snps              gene statistic       pvalue          FDR
241 1_714019_A_G_b37 ENSG00000237491.4  5.392883 1.576441e-07 3.597687e-06
         beta
241 0.7902205
#}
# and to verify value for gene-snp pairs:
echo $Tissue
#{r
source('/project/mstephens/gtex/scripts/SumstatQuery.R')
dat <- GetFlatSS('ENSG00000237491.4', '/project/mstephens/gtex/analysis/april2015/eqtl_data/GTEx_Analysis_2015-01-12_MatrixEQTL_allCisSNPGenePairs/Adipose_Subcutaneous_Analysis.h5')
print(dat["1_714019_A_G_b37", ])
#}
#{out
        beta       t-stat      p-value
7.902205e-01 5.392883e+00 1.576441e-07
#}
# I verified a few other gene-SNP pairs, all agree. So I can claim I've figured out the input data and parameters used for the GTEx analysis!
###
# Update @@eqtlbma@@ analysis for some gene-snp pairs and verify with GTEx @@matrixEQTL@@
###
# Here is the command for generating summary statistics via @@eqtlbma_bf@@:
snakemake eqtlbma_toy
#{out
gene    snp     betahat.geno    betapval.geno
ENSG00000177757.1       1_662622_G_A_b37        -2.588170e-04   9.985439e-01
ENSG00000177757.1       1_676127_C_T_b37        7.151412e-02    7.744839e-01
ENSG00000177757.1       1_691541_AT_A_b37       -9.077870e-02   4.383949e-01
ENSG00000177757.1       1_693625_T_C_b37        -5.757815e-02   7.415218e-01
ENSG00000177757.1       1_693731_A_G_b37        -1.080375e-02   9.255429e-01
ENSG00000177757.1       1_697411_G_GA_b37       5.502301e-01    2.327584e-02
ENSG00000177757.1       1_701835_T_C_b37        7.243649e-01    3.168885e-03
ENSG00000177757.1       1_704367_T_C_b37        1.898470e-01    3.756234e-01
ENSG00000177757.1       1_705882_G_A_b37        -1.595642e-01   3.141656e-01
#}
# Check with @@MatrixEQTL@@
#{r
gg = 'ENSG00000177757.1'
for (ss in c('1_662622_G_A_b37', '1_676127_C_T_b37', '1_691541_AT_A_b37', '1_693625_T_C_b37', '1_693731_A_G_b37')) print(me$all$eqtls[which(me$all$eqtls$snps == ss & me$all$eqtls$gene == gg ),][,c(2,1,6,4)])
#}
#{out
                  gene             snps         beta    pvalue
5493 ENSG00000177757.1 1_662622_G_A_b37 -0.000258817 0.9985439
                  gene             snps       beta    pvalue
4593 ENSG00000177757.1 1_676127_C_T_b37 0.07151412 0.7744839
                  gene              snps       beta    pvalue
3047 ENSG00000177757.1 1_691541_AT_A_b37 -0.0907787 0.4383949
                  gene             snps        beta    pvalue
4454 ENSG00000177757.1 1_693625_T_C_b37 -0.05757815 0.7415218
                  gene             snps        beta    pvalue
5200 ENSG00000177757.1 1_693731_A_G_b37 -0.01080375 0.9255429
#}
# Thus @@eqtlbma_bf@@ agrees with @@MatrixEQTL@@ when input agree. Good! We'll have to update the analysis using new input data.
